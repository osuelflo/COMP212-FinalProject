---
title: "Exploring the Moving Averages Method for Stocks"
author: "Jacob Posner, Owen Suelflow, Sam Anthony"
date: "2024-05-1"
output: 
  html_document:
    theme: sandstone
    highlight: tango
---

```{=html}
<style type="text/css">
/* Whole document: */
body{
  font-family: "Palatino Linotype", "Book Antiqua", Palatino, serif;
  font-size: 12pt;
}
h1.title {
  font-size: 38px;
  text-align: center;
}
h4.author {
  font-size: 18px;
  text-align: center;
}
h4.date {
  font-size: 18px;
  text-align: center;
}
</style>
```

```{r include = FALSE}
knitr::opts_chunk$set(
  warning = FALSE,
  message = FALSE,
  collapse = TRUE, 
  echo = FALSE, 
  fig.height = 3, 
  fig.width = 5,
  fig.align = 'center')
```

```{r,message=FALSE}
library(ggplot2)
library(tidyverse)
library(TTR)
library(plotly)
library(rvest)
library(dplyr)
library(tidyr)
```

# Introduction

### Question/Goal

How can we best advise someone with common stock knowledge to help them succeed in making money using the Moving Averages strategy?

### Background and Motivation

  It's no secret that trading stocks have proven complicated and challenging. Many people gain tremendous fortunes, while others lose everything. Traders utilize many strategies to help them make the most of their invested money in the market. There are countless strategies that could be utilized, as each trader could have their own strategy, but there are also well-known strategies. According to Investopedia, there are four common trend trading strategies: Moving Averages, Moving Averages Convergence Divergence (MACD), Relative Strength Index (RSI), and On-Balance Volume (OBV) (Mitchell, 2024). For the purposes of this analysis, we chose to analyze Moving Averages. Moving Averages use a small and large number of daily averages to help predict the stock market trends and help traders know when to buy or sell a particular stock. Both the large and small numbers represent the daily average of previous days. For example, if the smaller average were 20, we would average the 20 days prior to the current day. The trader can use any set of numbers when determining the length of the averages. Some traders opt to use shorter periods, while others opt for more extended periods to see longer averages and trends in the market. Using our shiny app, we explore the best ways to utilize the Moving Averages strategy and how traders can best spend their money to make more money. 
  
### Data Background 

Sectors

- Scraped from stockanalysis.com
- Chose the 6-10 largest stocks per sector

# Using Our Shiny App to Analyze Tesla

### Sectors

Starting at the sector level, let’s take a look at how much the consumer-discretionary sector made using the default time frames: 10 days for the shorter one and 50 days for the longer one. We see that if we used the MA strategy on every stock in the consumer-discretionary sector, we would’ve made more using the MA strategy than keeping our money invested in the sector.
```{r,message=FALSE,error=FALSE}
prof <- my_profit_sectors("consumer-discretionary",10,50)$Profit
d <- prof$Date[1]
sp<- my_spy_hold(date=d,filterDate = TRUE) %>% filter(Date >= prof$Date[1])
    val <-1000*nrow(my_stocks_sector("consumer-discretionary"))
    p2<- ggplot()+
      geom_line(data = prof,aes(x=Date,y=AccountValue,color="black"))+
      geom_line(data = prof,aes(x=Date,y=HoldAccountValue,color="orange"))+
      geom_line(data = sp, aes(x=Date,y=AccountValue*nrow(my_stocks_sector("consumer-discretionary")),color="red"))+
      labs(x = "Date",y="Account Value",title="Comparing Profit Across Different Types of Trades",subtitle=str_glue("Starting with 1000$. and putting whole account into each trade, for each ticker.\n Putting {val}$ into SPY and $1000 into each ticker and holding"),color="Type Of Trade")+
      scale_color_manual(values=c("black","orange","red"),
                         labels=c("MA Crossover",str_glue("Holding Consumer-Discretionary Sector"),"Holding SPY"))+
      theme_minimal()
    p2
```

### Basic MA Strategy

	We’re going to start by picking a simple MA combination for Tesla (TSLA). Using the default time frames for our app, we’ll set the shorter one at 10 days, and the longer one at 50 days. Here is a section of our plot that shows the moving averages. A green “x” means we should buy and a red “x” means we should sell. 


```{r,message=FALSE,error=FALSE}
res <- my_ma_cross("TSLA",10,50)
prices <- res[[1]]
results <- res[[2]]
combined <- prices %>% left_join(results, by='Date')
buys <- combined %>% 
    filter(Buy==TRUE) %>% 
    select(Date,AccountValue,sma1)
sells <- combined %>% 
    filter(Sell==TRUE) %>% 
    select(Date,AccountValue,sma1)
p<- ggplot()+
      geom_line(data=combined,aes(x = Date,y = Close, color = 'black'))+
      geom_line(data=combined,aes(x = Date,y=sma1,color='blue'))+
      geom_line(data=combined,aes(x = Date,y=sma2,color = 'orange'))+
      geom_point(data=sells,aes(x = Date,y=sma1),shape=4,size=2,color="red")+
      geom_point(data=buys,aes(x = Date,y=sma1),shape=4,size=2,color="green")+
      labs(color = "Line Type",y="Price",x="Date",title="TSLA Chart",subtitle="Interactive Chart. Green X's represent where trades were taken, and Red X's represent where trades were closed.")+
      ylim(c(0,max(combined$Close)*4))+
      scale_color_manual(values = c('black',"blue", "orange"),
                         labels = c('TSLA Price','10 SMA','50 SMA'))+
      theme_minimal()
    ggplotly(p,dynamicTicks = TRUE)
```


Comparing the MA strategy to just leaving our money in the stock, we can see that we would’ve made significantly more if we had just left our money invested in Tesla than using the MA strategy on the default days. 

```{r,message=FALSE,error=FALSE}
d <- combined$Date[1]
spy1<-my_spy_hold(date=d,filterDate = TRUE)
p2<- ggplot()+
      geom_line(data = combined,aes(x=Date,y=AccountValue,color="black"))+
      geom_line(data = combined,aes(x=Date,y=HoldAccountValue,color="orange"))+
      geom_line(data = spy1, aes(x=Date,y=AccountValue,color="red"))+
      labs(x = "Date",y="Account Value",title="Profit Using Basic MA Crossover Strategy",subtitle="Starting with $1000, and putting whole account into each trade",color="Type Of Trade")+
      scale_color_manual(values=c("black","orange","red"),
                         labels=c("MA Crossover","Holding TSLA","Holding SPY"))+
      theme_minimal()
    p2
```


Over time, we see that we lost more trades than we won with a win percentage of 42.86% and our average percent gain was 13.38. 

```{r,message=FALSE,error=FALSE}
my_collapse_table(results)
```


### Finding the Best MA Combination

	Now that we’ve taken a look at a sector and an individual stock from that sector, let's find the best combination of the shorter and longer averages to make the most money for Tesla. 
	

```{r,message=FALSE,error=FALSE}
ma_comb <- my_part_ma_cross("TSLA")
ma_comb %>% 
      ggplot()+
      geom_tile(aes(x=MA1,y=MA2,fill=log10(AccountValue)))+
      scale_fill_viridis_b()+
      labs(x="Length of Shorter Moving Average",
           y="Ratio of Longer Moving Average to Shorter Moving Average",
           fill="Base 10 Log of Account Value",
           title="Comparing MA Crossover Strategy Across Different Combinations of MA Lengths",
           subtitle="Each rectangle represents the end account value of the strategy with the corresponding moving averages")+
      theme_classic()
```


There are a couple of combinations that would be a good fit to maximize our profit, but we’re going to try 43.75 days for the longer one and 35 for the shorter one. Using these numbers for our averages improves our winning percentage by about 2%, but bumps up our average percent gain by almost 4%. 

```{r,message=FALSE,error=FALSE}
res <- my_ma_cross("TSLA",35,43.75)
prices <- res[[1]]
results <- res[[2]]
combined <- prices %>% left_join(results, by='Date')
spy1<-my_spy_hold(date=d,filterDate = TRUE)
p2<- ggplot()+
      geom_line(data = combined,aes(x=Date,y=AccountValue,color="black"))+
      geom_line(data = combined,aes(x=Date,y=HoldAccountValue,color="orange"))+
      geom_line(data = spy1, aes(x=Date,y=AccountValue,color="red"))+
      labs(x = "Date",y="Account Value",title="Profit Using Basic MA Crossover Strategy",subtitle="Starting with $1000, and putting whole account into each trade",color="Type Of Trade")+
      scale_color_manual(values=c("black","orange","red"),
                         labels=c("MA Crossover","Holding TSLA","Holding SPY"))+
      theme_minimal()
    p2
```


# Conclusion

Using the moving averages strategy has its pros and cons. It helps to ensure that you never have to worry about the stock market crashing because you are always constantly buying and selling. However, it often makes significantly less money than just keeping your money invested in a certain stock. Using the moving averages strategy is a safe bet, most of the time, and could help a trader make money with lower risk. 

# Appendix


### Loading in required packages
```{r,message=FALSE,error=FALSE,warning=FALSE}
library(ggplot2)
library(tidyverse)
library(TTR)
library(plotly)
library(rvest)
```

### Scraping 11 main sectors and the top 10 biggest stocks in each sector
```{r}
SECTOR_LIST <- read_csv("data/sectors.csv") # Result csv from the below function
sectors <- unique(SECTOR_LIST$Sector) # Getting a list of the 11 sectors

# Function to scrape stockanalysis.com for sector information
my_sectors <- function(){
  # Initializing two result vectors
  tickers <- rep(NA,110)
  sectorVec <- rep(NA,110)
  j <- 0
  for(sec in sectors){
    print(sec)
    url <- str_glue("https://stockanalysis.com/stocks/sector/{sec}")
    page <- read_html(url)
    res<-page %>% 
      html_elements("td") %>% # Grabbing the 'td' element
      html_text()
    for(i in 1:10){ # Going through and getting the ticker of the top ten biggest stocks
      tickers[10*j+i] <- res[2+7*(i-1)] # Not pretty, but will work
      sectorVec[10*j+i] <- sec
    }
    j<- j+1
  }
  return(data.frame(Ticker=tickers,Sector=sectorVec)) # Returns a dataframe where each row has a ticker and corresponding sector
}

# Gets the list of tickers from a given sector
my_stocks_sector <- function(sector){
  temp <- SECTOR_LIST %>% filter(Sector == sector)
  return(data.frame(Tickers=temp$Ticker))
}
```

### Main MA Crossover Code

```{r}
# Ticker is the stock (ex. AAPL)
# ma1 is desired length of shorter moving average
# ma2 is desired length of longer moving average
# filterDate is a boolean that is true if you want to filter, false if not
# date is the first dats that you want your data to start from
# date2 is the date you want your data to end on
my_filter_date <- function(ticker,ma1,ma2,filterDate,date,date2){
  prices <- read_csv(str_glue("data/nasdaq_prices/stocks/{ticker}.csv"))
  if(filterDate){
    prices<- fix_na(prices)
    prices<- prices %>% 
      filter(Date >=date) %>%
      filter(Date <= date2) %>% 
      my_sma(ma1,ma2) %>% 
      select(Date,Close,sma1,sma2) %>%
      drop_na()
  }
  else{
    prices<-fix_na(prices)
    prices<- prices %>% 
      my_sma(ma1,ma2) %>% 
      select(Date,Close,sma1,sma2) %>%
      drop_na()
  }
  return(prices)
}

# df is a dataframe of pricing data
# n is length of shorter moving average
# n2 is length of longer moving average
my_sma <- function(df,n,n2){ # Uses the SMA function from the TTR package to get the moving averages of length n and n2
  return(df %>% 
           mutate(sma1 = SMA(df$Close,n=n),
                  sma2 = SMA(df$Close,n=n2)))
}

# df is a dataframe
fix_na <- function(df){ # Function that finds missing data, and replaces that row with the previous row
  bad <-which(is.na(df))
  bad2 <- unique(bad %% nrow(df))
  if(0 %in% bad2){
    df <- df[1:nrow(df)-1,]
  }
  else{
    df[bad2,] <- df[bad2-1,]
  }
  return(df)
}

# Ticker is the stock (ex. AAPL)
# ma1 is desired length of shorter moving average
# ma2 is desired length of longer moving average
# filterDate is a boolean that is true if you want to filter, false if not
# date is the first dats that you want your data to start from
# date2 is the date you want your data to end on
my_ma_cross <- function(ticker,ma1,ma2,date=NA,date2=NA,filterDate=FALSE){
  prices <- my_filter_date(ticker,ma1,ma2,filterDate,date,date2)
  # Initializing values
  curPrice <- prices$Close[1] # current price of the stock
  prevPrice <- 0 # variable that keeps track of price of stock when we entered trade
  prevHoldPrice <- curPrice # Keeps track of value of stock at beginning of time period
  account <- 1000 # Keeps track of the current value of the MA crossover account
  prevAccount <- 1000 # Keeps track of the previous account value of the MA crossover account to help with calculating percentage gain on a trade
  holdAccount <- 1000 # Keeps track of the current value of the account that is just holding the stock
  wins <- 0 # Number of trades that made money
  losses <- 0 # Number of trades that lost money
  # Vectors that will be used to create results dataframe
  winsVec <- rep(0,nrow(prices))
  lossesVec <- rep(0,nrow(prices))
  holdAccountVec <- c(1000,rep(0,nrow(prices)-1))
  accountVec <- c(1000,rep(0,nrow(prices)-1))
  buyVec <- rep(FALSE,nrow(prices))
  sellVec <- rep(FALSE,nrow(prices))
  pct_GainVec <- rep(0,nrow(prices))
  i <- 2
  inTrade <- FALSE # Boolean indicator that states whether or not we are actively in a trade
  while(i <= nrow(prices)){
    close <- prices$Close[i]
    curPrice <- close
    s1 <- prices$sma1[i]
    s2 <- prices$sma2[i]
    holdAccount <- 1000 * (curPrice/prevHoldPrice) # Always update hold account value
    holdAccountVec[i] <- holdAccount
    if(inTrade){
      account <- prevAccount * (curPrice/prevPrice) # Update account value if in trade
      if(s1 < s2){ # If we are in a trade and shorter moving average crosses below longer one, then we sell
        inTrade <- FALSE
        sellVec[i] <- TRUE
        pct_GainVec[i] <- (account-prevAccount)/prevAccount*100
        prevAccount <- account
        if(curPrice > prevPrice){ # If we made money
          wins <- wins + 1
        }
        else{
          losses <- losses + 1
        }
      }
    }
    else{ # If we are not in a trade and the shorter moving average crosses above the longer one, then we buy and enter the trade
      if(s1 > s2 & prices$sma1[i-1] < prices$sma2[i-1]){
        buyVec[i] <- TRUE
        inTrade <- TRUE
        prevPrice <- curPrice
      }
    }
    winsVec[i] <- wins
    lossesVec[i] <- losses
    accountVec[i] <- account
    i <- i+1
  }
  return(list(Prices = prices, Results = data.frame(Date = prices$Date,Wins = winsVec, Losses = lossesVec, AccountValue = accountVec, Buy = buyVec, Sell = sellVec,pctGain = pct_GainVec,HoldAccountValue=holdAccountVec)))
}
```

### Holding SPY Code

```{r}
# Function that calculates the value of the account if 1000 dollars was put into SPY (Basically the S&P 500), and held for the duration of the time period.
# date is the first dats that you want your data to start from
# filterDate is a boolean that is true if you want to filter, false if not
my_spy_hold <- function(date=NA,filterDate=FALSE){
  # Filtering date by input
  if(filterDate){
    prices <- read_csv(str_glue("data/nasdaq_prices/etfs/SPY.csv")) %>% 
      filter(Date >= date) %>% 
      select(Date,Close)
  }
  else{
    prices <- read_csv(str_glue("data/nasdaq_prices/etfs/SPY.csv")) %>% 
      select(Date,Close)
  }
  i <- 2
  accountValVec <- rep(0,nrow(prices))
  accountValue <- 1000 # Value of the account at initialization
  accountValVec[1] <- 1000
  prevPrice <- prices$Close[1]
  while(i <= nrow(prices)){
    curPrice <- prices$Close[i]
    accountValue <- 1000 * (curPrice/prevPrice)
    accountValVec[i] <- accountValue
    i <- i +1
  }
  return(data.frame(Date = prices$Date,AccountValue = accountValVec))
}
```


### Code For Sector Analysis of Shiny App


```{r}
# Iterating through a list of stocks to find the stock with the smallest amount of data (i.e. the date of the first row is the latest)
# stocks is a list of tickers to iterate through
find_min_date <- function(stocks){
  df <-read_csv(str_glue("data/nasdaq_prices/stocks/{stocks[1]}.csv"))
  date <- df$Date[1]
  for(i in 2:length(stocks)){
    df <-read_csv(str_glue("data/nasdaq_prices/stocks/{stocks[i]}.csv"))
    date2 <- df$Date[1]
    if(date2 > date){
      date <- date2
    }
  }
  return(date)
}

# Iterating through a list of stocks to find the stock with the earliest last row (i.e. the date on the last row of data is the earliest)
# stocks is a list of tickers to iterate through
find_max_date <- function(stocks){
  df <-read_csv(str_glue("data/nasdaq_prices/stocks/{stocks[1]}.csv"))
  date <- df$Date[nrow(df)]
  for(i in 2:length(stocks)){
    df <-read_csv(str_glue("data/nasdaq_prices/stocks/{stocks[i]}.csv"))
    date2 <- df$Date[nrow(df)]
    if(date2 < date){
      date <- date2
    }
  }
  return(date)
}

# Function to analyze profit of MA crossover strategy across a sector.
# sector is whatever sector you want to analyze
# ma1 is desired length of shorter moving average
# ma2 is desired length of longer moving average
my_profit_sectors <- function(sector,ma1,ma2){
  tickers <- SECTOR_LIST %>% filter(Sector == sector)
  stocks <- tickers$Ticker
  date <- find_min_date(stocks)
  date2 <- find_max_date(stocks)
  res <- my_ma_cross(stocks[1],ma1,ma2,date,date2,filterDate = TRUE)$Results
  prof1 <- res %>% select(Date,AccountValue,HoldAccountValue)
  res1 <- my_collapse_table(res,collapseAPG = TRUE)
  for(i in 2:length(stocks)){
    res <- my_ma_cross(stocks[i],ma1,ma2,date,date2,filterDate = TRUE)$Results
    prof2 <- res %>% select(Date,AccountValue,HoldAccountValue)
    res2 <- my_collapse_table(res,collapseAPG = TRUE)
    prof1$AccountValue <- prof1$AccountValue + prof2$AccountValue
    prof1$HoldAccountValue <- prof1$HoldAccountValue + prof2$HoldAccountValue
    res1$AccountValue <- res1$AccountValue + res2$AccountValue
    res1$TotalTrades <- res1$TotalTrades + res2$TotalTrades
    res1$Wins <- res1$Wins + res2$Wins
    res1$Losses <- res1$Losses + res2$Losses
    res1$AvgPctGain <- res1$AvgPctGain + res2$AvgPctGain
  }
  res1$WinPct <- res1$Wins/res1$TotalTrades*100 # Re-calculating win percentage across all tickers within a sector
  res1$AvgPctGain <- res1$AvgPctGain/res1$TotalTrades # Dividing by total trades, as the average percent gain was scaled by total trades for each stock so calculations would be easier.
  return(list(Results=res1,Profit=prof1))
}

# Collapses down a results table, summing wins and losses and calculating total percent gain, and finding avergae percent gain depending on value of collapseAPG
# results is the resulting dataframe from one of the main profit functions
# collapseAPG is a boolean that is true if we want cumulative percent gain, and false if we want average percent gain (i.e. takign cumulative percent gain and dividing by total trades)
my_collapse_table <- function(results,collapseAPG=FALSE){
  if(collapseAPG){
    totals<-results[nrow(results),]
    totals<-totals %>% 
      mutate(TotalTrades = Wins+Losses,
             WinPct = Wins/(Losses+Wins)*100,
             AvgPctGain = sum(results$pctGain)) %>% # This is useful for aggregating results from multiple stocks in the sector analysis
      select(TotalTrades,Wins,Losses,WinPct,AccountValue,AvgPctGain)
    return(totals)
  }
  else{
    totals<-results[nrow(results),]
    totals<-totals %>% 
      mutate(TotalTrades = Wins+Losses,
             WinPct = Wins/(Losses+Wins)*100,
             AvgPctGain = sum(results$pctGain)/TotalTrades) %>% 
      select(TotalTrades,Wins,Losses,WinPct,AccountValue,AvgPctGain)
    return(totals)
  }
}
```


### Analyzing Strategy On Different Combinations of Moving Averages

```{r}
# ticker represents a stock ticker (ex. AAPL)
my_part_ma_cross <- function(ticker){
  # 250 combinations of moving averages
  winsVec <- rep(0,250)
  lossesVec <- rep(0,250)
  totalTradesVec <- rep(0,250)
  accountVec <- rep(0,250)
  pct_GainVec <- rep(0,250)
  ma1Vec <- rep(0,250)
  ma2Vec <- rep(0,250)
  winRateVec <- rep(0,250)
  j<- 1
  p <- read_csv(str_glue("data/nasdaq_prices/stocks/{ticker}.csv"))
  for(ma1 in seq(from=5,to=50,by=5)){
    for(ma2 in seq(from=1.2,to=6,by=0.2)){ # value of ma2 is ratio of length of long MA to short MA
      prices <- p %>% 
        my_sma(ma1,round(ma1*ma2)) %>% 
        select(Date,Close,sma1,sma2) %>%
        drop_na()
      curPrice <- prices$Close[1]
      prevPrice <- 0
      prevAccount <- 1000
      account <- 1000
      wins <- 0
      losses <- 0
      pctGain <- 0
      i <- 2
      inTrade <- FALSE
      while(i <= nrow(prices)){
        close <- prices$Close[i]
        curPrice <- close
        s1 <- prices$sma1[i]
        s2 <- prices$sma2[i]
        if(inTrade){
          account <- prevAccount * (curPrice/prevPrice)
          if(s1 < s2){
            inTrade <- FALSE
            pctGain <- pctGain+(account-prevAccount)/prevAccount*100
            prevAccount <- account
            if(curPrice > prevPrice){
              wins <- wins + 1
            }
            else{
              losses <- losses + 1
            }
          }
        }
        else{
          if(s1 > s2 & prices$sma1[i-1] < prices$sma2[i-1]){
            inTrade <- TRUE
            prevPrice <- curPrice
          }
        }
        i <- i+1
      }
      winsVec[j] <- wins
      lossesVec[j] <- losses
      totalTradesVec[j] <- wins+losses
      accountVec[j] <- account
      pct_GainVec[j] <- pctGain/(wins+losses)
      ma1Vec[j] <- ma1
      ma2Vec[j] <- ma2
      winRateVec[j] <- wins/(wins+losses)*100
      j<-j+1
    }
  }
  return(data.frame(MA1 = ma1Vec,
                    MA2 = ma2Vec,
                    Wins = winsVec,
                    Losses = lossesVec,
                    AccountValue = accountVec,
                    AvgPctGain = pct_GainVec,
                    WinRate = winRateVec))
}
```