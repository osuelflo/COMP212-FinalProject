```{r,message=FALSE}
library(ggplot2)
library(tidyverse)
library(TTR)
library(plotly)
library(rvest)
```

```{r}
bac<-read_csv("../data/nasdaq_prices/stocks/BAC.csv")
bad <-which(is.na(bac))
bad
# bad % nrow(bac)
nrow(bac)
bad %% 11885
bac[5630,]
unique(bad %% 11885)
```


```{r}
fix_na <- function(df){
  bad <-which(is.na(df))
  bad2 <- unique(bad %% nrow(df))
  df[bad2,] <- df[bad2-1,]
  return(df)
}
```


```{r}
# Using ttr
ma_periods <- c(10,20,50,100,200)
my_ema <- function(df,n,n2){
  return(df %>% 
           mutate(ema1 = EMA(df$Close,n=n),
                  ema2 = EMA(df$Close,n=n2)))
}
my_sma <- function(df,n,n2){
  return(df %>% 
           mutate(sma1 = SMA(df$Close,n=n),
                  sma2 = SMA(df$Close,n=n2)))
}
```


```{r}
fnames <- dir(path="../data/nasdaq_prices/stocks")
tickers <- lapply(fnames,str_extract,pattern="^[:upper:]+")
```


```{r}
my_spy_hold()
```


```{r}
my_spy_hold <- function(date=NA,filterDate=FALSE){
  if(filterDate){
    prices <- read_csv(str_glue("../data/nasdaq_prices/etfs/SPY.csv")) %>% 
      filter(Date >= date) %>% 
      select(Date,Close)
  }
  else{
    prices <- read_csv(str_glue("../data/nasdaq_prices/etfs/SPY.csv")) %>% 
      select(Date,Close)
  }
  i <- 2
  accountValVec <- rep(0,nrow(prices))
  accountValue <- 1000
  accountValVec[1] <- 1000
  prevPrice <- prices$Close[1]
  while(i <= nrow(prices)){
    curPrice <- prices$Close[i]
    accountValue <- 1000 * (curPrice/prevPrice)
    accountValVec[i] <- accountValue
    i<- i +1
  }
  return(data.frame(Date = prices$Date,AccountValue = accountValVec))
}


my_ma_cross <- function(ticker,ma1,ma2,date=NA,filterDate=FALSE){
  if(filterDate){
    prices <- read_csv(str_glue("../data/nasdaq_prices/stocks/{ticker}.csv")) %>% 
      filter(Date >=date) %>% 
      my_sma(ma1,ma2) %>% 
      select(Date,Close,sma1,sma2) %>%
      drop_na()
  }
  else{
    prices <- read_csv(str_glue("../data/nasdaq_prices/stocks/{ticker}.csv")) %>% 
      my_sma(ma1,ma2) %>% 
      select(Date,Close,sma1,sma2) %>%
      drop_na()
  }
  curPrice <- prices$Close[1]
  prevPrice <- 0
  prevHoldPrice <- curPrice
  account <- 1000
  holdAccount <- 1000
  wins <- 0
  losses <- 0
  winsVec <- rep(0,nrow(prices))
  lossesVec <- rep(0,nrow(prices))
  holdAccountVec <- c(1000,rep(0,nrow(prices)-1))
  accountVec <- c(1000,rep(0,nrow(prices)-1))
  buyVec <- rep(FALSE,nrow(prices))
  sellVec <- rep(FALSE,nrow(prices))
  pct_GainVec <- rep(0,nrow(prices))
  i <- 2
  inTrade <- FALSE
  while(i <= nrow(prices)){
    close <- prices$Close[i]
    curPrice <- close
    s1 <- prices$sma1[i]
    s2 <- prices$sma2[i]
    holdAccount <- 1000 * (curPrice/prevHoldPrice)
    holdAccountVec[i] <- accountValue
    if(inTrade){
      account <- prevAccount * (curPrice/prevPrice)
      if(s1 < s2){
        inTrade <- FALSE
        sellVec[i] <- TRUE
        pct_GainVec[i] <- (account-prevAccount)/prevAccount*100
        prevAccount <- account
        if(curPrice > prevPrice){
          wins <- wins + 1
        }
        else{
          losses <- losses + 1
        }
      }
    }
    else{
      if(s1 > s2 & prices$sma1[i-1] < prices$sma2[i-1]){
        buyVec[i] <- TRUE
        inTrade <- TRUE
        prevPrice <- curPrice
      }
    }
    winsVec[i] <- wins
    lossesVec[i] <- losses
    accountVec[i] <- account
    i <- i+1
  }
  return(list(Prices = prices, Results = data.frame(Date = prices$Date,Wins = winsVec, Losses = lossesVec, AccountValue = accountVec, Buy = buyVec, Sell = sellVec,pctGain = pct_GainVec,HoldAccountValue=holdAccountVec)))
}


```



```{r}
my_part_ma_cross <- function(ticker){
  winsVec <- rep(0,250)
  lossesVec <- rep(0,250)
  totalTradesVec <- rep(0,250)
  accountVec <- rep(0,250)
  pct_GainVec <- rep(0,250)
  ma1Vec <- rep(0,250)
  ma2Vec <- rep(0,250)
  winRateVec <- rep(0,250)
  j<- 1
  p <- read_csv(str_glue("../data/nasdaq_prices/stocks/{ticker}.csv"))
  for(ma1 in seq(from=5,to=50,by=5)){
    for(ma2 in seq(from=1.2,to=6,by=0.2)){
      prices <- p %>% 
        my_sma(ma1,round(ma1*ma2)) %>% 
        select(Date,Close,sma1,sma2) %>%
        drop_na()
      curPrice <- prices$Close[1]
      prevPrice <- 0
      prevAccount <- 1000
      account <- 1000
      wins <- 0
      losses <- 0
      pctGain <- 0
      i <- 2
      inTrade <- FALSE
      while(i <= nrow(prices)){
        close <- prices$Close[i]
        curPrice <- close
        s1 <- prices$sma1[i]
        s2 <- prices$sma2[i]
        if(inTrade){
          account <- prevAccount * (curPrice/prevPrice)
          if(s1 < s2){
            inTrade <- FALSE
            pctGain <- pctGain+(account-prevAccount)/prevAccount*100
            prevAccount <- account
            if(curPrice > prevPrice){
              wins <- wins + 1
            }
            else{
              losses <- losses + 1
            }
          }
        }
        else{
          if(s1 > s2 & prices$sma1[i-1] < prices$sma2[i-1]){
            inTrade <- TRUE
            prevPrice <- curPrice
          }
        }
        i <- i+1
      }
      winsVec[j] <- wins
      lossesVec[j] <- losses
      totalTradesVec[j] <- wins+losses
      accountVec[j] <- account
      pct_GainVec[j] <- pctGain/(wins+losses)
      ma1Vec[j] <- ma1
      ma2Vec[j] <- ma2
      winRateVec[j] <- wins/(wins+losses)*100
      print(j)
      j<-j+1
    }
  }
  return(data.frame(MA1 = ma1Vec,
                    MA2 = ma2Vec,
                    Wins = winsVec,
                    Losses = lossesVec,
                    AccountValue = accountVec,
                    AvgPctGain = pct_GainVec,
                    WinRate = winRateVec))
}
```


```{r}
my_all_ma_cross <- function(ticker){
  winsVec <- rep(0,14161)
  lossesVec <- rep(0,14161)
  totalTradesVec <- rep(0,14161)
  accountVec <- rep(0,14161)
  pct_GainVec <- rep(0,14161)
  ma1Vec <- rep(0,14161)
  ma2Vec <- rep(0,14161)
  winRateVec <- rep(0,14161)
  j<- 1
  p <- read_csv(str_glue("../data/nasdaq_prices/stocks/{ticker}.csv"))
  for(ma1 in seq(from=5,to=100,by=1)){
    for(ma2 in seq(from=ma1+1,to=200,by=1)){
      prices <- p %>% 
        my_sma(ma1,ma2) %>% 
        select(Date,Close,sma1,sma2) %>%
        drop_na()
      curPrice <- prices$Close[1]
      prevPrice <- 0
      prevAccount <- 1000
      account <- 1000
      wins <- 0
      losses <- 0
      pctGain <- 0
      i <- 2
      inTrade <- FALSE
      while(i <= nrow(prices)){
        close <- prices$Close[i]
        curPrice <- close
        s1 <- prices$sma1[i]
        s2 <- prices$sma2[i]
        if(inTrade){
          account <- prevAccount * (curPrice/prevPrice)
          if(s1 < s2){
            inTrade <- FALSE
            pctGain <- pctGain+(account-prevAccount)/prevAccount*100
            prevAccount <- account
            if(curPrice > prevPrice){
              wins <- wins + 1
            }
            else{
              losses <- losses + 1
            }
          }
        }
        else{
          if(s1 > s2 & prices$sma1[i-1] < prices$sma2[i-1]){
            inTrade <- TRUE
            prevPrice <- curPrice
          }
        }
        i <- i+1
      }
      winsVec[j] <- wins
      lossesVec[j] <- losses
      totalTradesVec[j] <- wins+losses
      accountVec[j] <- account
      pct_GainVec[j] <- pctGain/(wins+losses)
      ma1Vec[j] <- ma1
      ma2Vec[j] <- ma2
      winRateVec[j] <- wins/(wins+losses)*100
      print(j)
      j<-j+1
    }
  }
  return(data.frame(MA1 = ma1Vec,
                    MA2 = ma2Vec,
                    Wins = winsVec,
                    Losses = lossesVec,
                    AccountValue = accountVec,
                    AvgPctGain = pct_GainVec,
                    WinRate = winRateVec))
}
```

```{r}
res2<- my_part_ma_cross("TSLA")
res2
```


```{r}
res <-my_all_ma_cross("AAPL")
res
```

```{r}
res %>% 
ggplot()+
  geom_point(aes(x=MA1,y=MA2,color=log10(AccountValue)),size=0.2)+
  scale_color_viridis_b()+
  xlim(c(5,200))+
  theme_minimal()
res %>% 
ggplot()+
  geom_point(aes(x=MA1,y=MA2,color=AvgPctGain),size=0.2)+
  scale_color_viridis_b()+
  xlim(c(5,200))+
  theme_minimal()
res %>% 
ggplot()+
  geom_point(aes(x=MA1,y=MA2,color=WinRate),size=0.2)+
  scale_color_viridis_b()+
  xlim(c(5,200))+
  theme_minimal()
```


```{r}
res2 %>% 
ggplot()+
  geom_tile(aes(x=MA1,y=MA2,fill=log10(AccountValue)))+
  scale_fill_viridis_b()+
  theme_minimal()
res2 %>% 
ggplot()+
  geom_tile(aes(x=MA1,y=MA2,fill=AvgPctGain))+
  scale_fill_viridis_b()+
  theme_minimal()
res2 %>% 
ggplot()+
  geom_tile(aes(x=MA1,y=MA2,fill=WinRate))+
  scale_fill_viridis_b()+
  theme_minimal()
```


# More things to add
### Shiny app stuff
1. Add another tab that explores different combinations of moving averages for a given ticker
2. Add another tab that explores viability of strategy across sectors
3. Add another tab that explores viability of strategy for different market environments
### Overall analysis
1. Make a couple MA combination plots for all possible combos, for a couple different stocks
2. Take a couple popular combinations and run the strategy for every ticker, comparing results across sectors and market environments
3. Incorporate annual market returns into analysis to see if strategy can beat the market

```{r}
my_sectors <- function(){
  tickers <- rep(NA,110)
  sectorVec <- rep(NA,110)
  j <- 0
  for(sec in sectors){
    print(sec)
    url <- str_glue("https://stockanalysis.com/stocks/sector/{sec}")
    page <- read_html(url)
    res<-page %>% 
    html_elements("td") %>% 
    html_text()
    for(i in 1:10){
      tickers[10*j+i] <- res[2+7*(i-1)]
      sectorVec[10*j+i] <- sec
    }
    j<- j+1
  }
  return(data.frame(Ticker=tickers,Sector=sectorVec))
}

find_min_date <- function(stocks){
  df <-read_csv(str_glue("../data/nasdaq_prices/stocks/{stocks[1]}.csv"))
  date <- df$Date[1]
  for(i in 2:10){
    df <-read_csv(str_glue("../data/nasdaq_prices/stocks/{stocks[i]}.csv"))
    date2 <- df$Date[1]
    if(date2 > date){
      date <- date2
    }
  }
  return(date)
}

my_profit_sectors <- function(sector,ma1,ma2){
  tickers <- res %>% filter(Sector == sector)
  stocks <- tickers$Ticker
  dfs <- rep(NA,10)
  date <- find_min_date(stocks)
  res1 <- my_collapse_table(my_ma_cross(stocks[1],ma1,ma2,date,filterDate = TRUE)$Results)
  res1$AvgPctGain <- res1$AvgPctGain*res1$TotalTrades
  for(i in 2:10){
    res2<-my_collapse_table(my_ma_cross(stocks[i],ma1,ma2,date,filterDate = TRUE)$Results)
    res1$AccountValue <- res1$AccountValue + res2$AccountValue
    res1$TotalTrades <- res1$TotalTrades + res2$TotalTrades
    res1$Wins <- res1$Wins + res2$Wins
    res1$Losses <- res1$Losses + res2$Losses
    res1$AvgPctGain <- res1$AvgPctGain + res2$AvgPctGain*res2$TotalTrades
  }
  res1$WinPct <- res1$Wins/res1$TotalTrades*100
  res1$AvgPctGain <- res1$AvgPctGain/res1$TotalTrades*100
  return(res1)
}
```


```{r,message=FALSE}
mysector <- "technology"
prof <- my_profit_sectors(mysector,15,50)
```

```{r}
# Sector plots
# 1. Profit over time
# 2. Table for overall stats

p<-prof %>% 
  ggplot()+
  geom_line(aes(x=Date,y=AccountValue))+
  labs(x = "Date",y="Account Value",title="Profit Using Basic MA Crossover Strategy",subtitle="Starting with $1000, and putting whole account into each trade")+
  theme_minimal()
p

```


# What to include:
### Plots
1. Time series plot of stock price
  - Basic line chart (each point is closing price)
  - Both moving averages
  - Date nicely formatted at the bottom
  - Vertical line indicating what date it is (?)
  - Green Triangle on plot to indicate trade was taken
  - Red triangle on plot to indicate when we sold
2. Time series plot of account value
3. Table that shows overall PnL, wins, losses, win percentage

Still to add:
  Add sector and multiple MA components to shiny app
  update all profit plots to include the value of the account if you just held the stock throughout whole period, as well as just holding SPY
```{r}
prices <- res[[1]]
results <- res[[2]]
combined <- prices %>% 
  left_join(results, by='Date')
combined
```

```{r}
ticker <- "AAPL"
SMA1 <- 10
SMA2 <- 50
buys <- combined %>% 
  filter(Buy==TRUE) %>% 
  select(Date,AccountValue,sma1)
sells <- combined %>% 
  filter(Sell==TRUE) %>% 
  select(Date,AccountValue,sma1)
p<- ggplot()+
  geom_line(aes(x = combined$Date,y = combined$Close, color = 'black'))+
  geom_line(aes(x = combined$Date,y=combined$sma1,color='blue'))+
  geom_line(aes(x = combined$Date,y=combined$sma2,color = 'orange'))+
  geom_point(aes(x = sells$Date,y=sells$sma1),shape=4,size=2,color="red")+
  geom_point(aes(x = buys$Date,y=buys$sma1),shape=4,size=2,color="green")+
  labs(color = "Line Type",y="Price",x="Date",title=str_glue("{ticker} Chart"))+
  ylim(c(0,max(combined$Close)*4))+
  scale_color_manual(values = c('black',"blue", "orange"),
    labels = c(str_glue('{ticker} Price'),str_glue('{SMA1} SMA'),str_glue('{SMA2} SMA')))+
  theme_minimal()
p
ggplotly(p,dynamicTicks = TRUE)
```

```{r}
p<-combined %>% 
  ggplot()+
  geom_line(aes(x=Date,y=AccountValue))+
  labs(x = "Date",y="Account Value",title="Profit Using Basic MA Crossover Strategy",subtitle="Starting with $1000, and putting whole account into each trade")+
  theme_minimal()
p+
  transition_reveal(Date)
```

```{r}
totals<-results[nrow(results),]
totals<-totals %>% 
  mutate(TotalTrades = Wins+Losses,
         WinPct = Wins/(Losses+Wins),
         AvgPctGain = sum(results$pctGain)/TotalTrades) %>%
  select(TotalTrades,Wins,Losses,WinPct,AccountValue,AvgPctGain)
totals
```





